import 'package:flutter/material.dart';
import 'package:provider/provider.dart';
import 'package:go_router/go_router.dart';
import 'package:file_picker/file_picker.dart';
import 'dart:io';
import '../../providers/book_provider.dart';
import '../../models/book_model.dart';
import '../../core/constants/app_colors.dart';
import '../../widgets/common/loading_widget.dart';

class AddBookScreen extends StatefulWidget {
  const AddBookScreen({super.key});

  @override
  State<AddBookScreen> createState() => _AddBookScreenState();
}

class _AddBookScreenState extends State<AddBookScreen> {
  final _formKey = GlobalKey<FormState>();
  final _titleController = TextEditingController();
  final _authorController = TextEditingController();
  final _descriptionController = TextEditingController();
  final _priceController = TextEditingController();

  String _selectedCategory = 'Fiction';
  bool _isFree = true;
  bool _isPremium = false;
  File? _coverImage;
  File? _bookFile;
  bool _isLoading = false;

  final List<String> _categories = [
    'Fiction',
    'Non-Fiction',
    'Science',
    'Technology',
    'History',
    'Biography',
    'Self-Help',
    'Business',
    'Romance',
    'Mystery',
    'Fantasy',
    'Horror',
    'Adventure',
    'Educational',
  ];

  @override
  void dispose() {
    _titleController.dispose();
    _authorController.dispose();
    _descriptionController.dispose();
    _priceController.dispose();
    super.dispose();
  }

  Future<void> _pickCoverImage() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.image,
        allowMultiple: false,
      );

      if (result != null) {
        setState(() {
          _coverImage = File(result.files.single.path!);
        });
      }
    } catch (e) {
      _showSnackBar('Error picking image: $e', isError: true);
    }
  }

  Future<void> _pickBookFile() async {
    try {
      FilePickerResult? result = await FilePicker.platform.pickFiles(
        type: FileType.custom,
        allowedExtensions: ['pdf', 'epub', 'mobi'],
        allowMultiple: false,
      );

      if (result != null) {
        setState(() {
          _bookFile = File(result.files.single.path!);
        });
      }
    } catch (e) {
      _showSnackBar('Error picking book file: $e', isError: true);
    }
  }

  Future<void> _saveBook() async {
    if (!_formKey.currentState!.validate()) return;

    if (_coverImage == null) {
      _showSnackBar('Please select a cover image', isError: true);
      return;
    }

    if (_bookFile == null) {
      _showSnackBar('Please select a book file', isError: true);
      return;
    }

    setState(() => _isLoading = true);

    try {
      final bookProvider = Provider.of<BookProvider>(context, listen: false);

      final book = BookModel(
        id: '', // Will be generated by Firestore
        title: _titleController.text.trim(),
        author: _authorController.text.trim(),
        description: _descriptionController.text.trim(),
        category: _selectedCategory,
        coverImageUrl: '', // Will be set after upload
        fileUrl: '', // Will be set after upload
        price: _isFree ? 0.0 : double.parse(_priceController.text),
        isFree: _isFree,
        isPremium: _isPremium,
        publishedDate: DateTime.now(),
        downloadCount: 0,
        favoriteCount: 0,
        rating: 0.0,
        fileType: _bookFile!.path.split('.').last,
        fileSizeInMB: 0.0, // Will be calculated during upload
        createdAt: DateTime.now(),
        updatedAt: DateTime.now(),
      );

      await bookProvider.addBook(
        book: book,
        coverImage: _coverImage!,
        bookFile: _bookFile!,
      );

      if (mounted) {
        _showSnackBar('Book added successfully!');
        context.pop();
      }
    } catch (e) {
      _showSnackBar('Error adding book: $e', isError: true);
    } finally {
      setState(() => _isLoading = false);
    }
  }

  void _showSnackBar(String message, {bool isError = false}) {
    ScaffoldMessenger.of(context).showSnackBar(
      SnackBar(
        content: Text(message),
        backgroundColor: isError ? AppColors.error : AppColors.success,
      ),
    );
  }

  @override
  Widget build(BuildContext context) {
    return Scaffold(
      backgroundColor: AppColors.background,
      appBar: AppBar(
        backgroundColor: AppColors.surface,
        title: const Text('Add New Book'),
        leading: IconButton(
          icon: const Icon(Icons.arrow_back),
          onPressed: () => context.pop(),
        ),
      ),
      body: SingleChildScrollView(
        padding: const EdgeInsets.all(24.0),
        child: Form(
          key: _formKey,
          child: Column(
            crossAxisAlignment: CrossAxisAlignment.start,
            children: [
              // Cover Image Selection
              const Text(
                'Cover Image',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              const SizedBox(height: 8),
              GestureDetector(
                onTap: _pickCoverImage,
                child: Container(
                  height: 200,
                  width: double.infinity,
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: AppColors.textSecondary),
                    color: AppColors.surface,
                  ),
                  child: _coverImage != null
                      ? ClipRRect(
                          borderRadius: BorderRadius.circular(12),
                          child: Image.file(_coverImage!, fit: BoxFit.cover),
                        )
                      : const Column(
                          mainAxisAlignment: MainAxisAlignment.center,
                          children: [
                            Icon(
                              Icons.add_photo_alternate,
                              size: 48,
                              color: AppColors.textSecondary,
                            ),
                            SizedBox(height: 8),
                            Text(
                              'Tap to select cover image',
                              style: TextStyle(color: AppColors.textSecondary),
                            ),
                          ],
                        ),
                ),
              ),

              const SizedBox(height: 24),

              // Title Field
              TextFormField(
                controller: _titleController,
                decoration: const InputDecoration(
                  labelText: 'Book Title',
                  hintText: 'Enter book title',
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter book title';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 16),

              // Author Field
              TextFormField(
                controller: _authorController,
                decoration: const InputDecoration(
                  labelText: 'Author',
                  hintText: 'Enter author name',
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter author name';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 16),

              // Category Dropdown
              DropdownButtonFormField<String>(
                initialValue: _selectedCategory,
                decoration: const InputDecoration(labelText: 'Category'),
                dropdownColor: AppColors.surface,
                items: _categories.map((category) {
                  return DropdownMenuItem<String>(
                    value: category,
                    child: Text(category),
                  );
                }).toList(),
                onChanged: (value) {
                  setState(() {
                    _selectedCategory = value!;
                  });
                },
              ),

              const SizedBox(height: 16),

              // Description Field
              TextFormField(
                controller: _descriptionController,
                maxLines: 4,
                decoration: const InputDecoration(
                  labelText: 'Description',
                  hintText: 'Enter book description',
                ),
                validator: (value) {
                  if (value == null || value.trim().isEmpty) {
                    return 'Please enter book description';
                  }
                  return null;
                },
              ),

              const SizedBox(height: 24),

              // Free/Premium Toggle
              Row(
                children: [
                  const Text(
                    'Book Type:',
                    style: TextStyle(
                      fontSize: 16,
                      fontWeight: FontWeight.bold,
                      color: Colors.white,
                    ),
                  ),
                  const SizedBox(width: 16),
                  Expanded(
                    child: Row(
                      children: [
                        Radio<bool>(
                          value: true,
                          groupValue: _isFree,
                          onChanged: (value) {
                            setState(() {
                              _isFree = value!;
                              if (_isFree) _isPremium = false;
                            });
                          },
                        ),
                        const Text(
                          'Free',
                          style: TextStyle(color: Colors.white),
                        ),
                        const SizedBox(width: 16),
                        Radio<bool>(
                          value: false,
                          groupValue: _isFree,
                          onChanged: (value) {
                            setState(() {
                              _isFree = !value!;
                            });
                          },
                        ),
                        const Text(
                          'Paid',
                          style: TextStyle(color: Colors.white),
                        ),
                      ],
                    ),
                  ),
                ],
              ),

              // Price Field (only if not free)
              if (!_isFree) ...[
                const SizedBox(height: 16),
                TextFormField(
                  controller: _priceController,
                  keyboardType: TextInputType.number,
                  decoration: const InputDecoration(
                    labelText: 'Price (\$)',
                    hintText: 'Enter price',
                  ),
                  validator: (value) {
                    if (!_isFree && (value == null || value.trim().isEmpty)) {
                      return 'Please enter price';
                    }
                    if (!_isFree && double.tryParse(value!) == null) {
                      return 'Please enter valid price';
                    }
                    return null;
                  },
                ),
              ],

              const SizedBox(height: 16),

              // Premium Toggle
              Row(
                children: [
                  Checkbox(
                    value: _isPremium,
                    onChanged: (value) {
                      setState(() {
                        _isPremium = value!;
                      });
                    },
                  ),
                  const Text(
                    'Premium Content',
                    style: TextStyle(color: Colors.white),
                  ),
                ],
              ),

              const SizedBox(height: 24),

              // Book File Selection
              const Text(
                'Book File',
                style: TextStyle(
                  fontSize: 16,
                  fontWeight: FontWeight.bold,
                  color: Colors.white,
                ),
              ),
              const SizedBox(height: 8),
              GestureDetector(
                onTap: _pickBookFile,
                child: Container(
                  width: double.infinity,
                  padding: const EdgeInsets.all(16),
                  decoration: BoxDecoration(
                    borderRadius: BorderRadius.circular(12),
                    border: Border.all(color: AppColors.textSecondary),
                    color: AppColors.surface,
                  ),
                  child: Row(
                    children: [
                      const Icon(
                        Icons.attach_file,
                        color: AppColors.textSecondary,
                      ),
                      const SizedBox(width: 8),
                      Expanded(
                        child: Text(
                          _bookFile != null
                              ? _bookFile!.path.split('/').last
                              : 'Select book file (PDF, EPUB, MOBI)',
                          style: TextStyle(
                            color: _bookFile != null
                                ? Colors.white
                                : AppColors.textSecondary,
                          ),
                        ),
                      ),
                    ],
                  ),
                ),
              ),

              const SizedBox(height: 32),

              // Save Button
              SizedBox(
                width: double.infinity,
                height: 50,
                child: ElevatedButton(
                  onPressed: _isLoading ? null : _saveBook,
                  child: _isLoading
                      ? const LoadingWidget()
                      : const Text(
                          'Add Book',
                          style: TextStyle(
                            fontSize: 16,
                            fontWeight: FontWeight.bold,
                          ),
                        ),
                ),
              ),
            ],
          ),
        ),
      ),
    );
  }
}
